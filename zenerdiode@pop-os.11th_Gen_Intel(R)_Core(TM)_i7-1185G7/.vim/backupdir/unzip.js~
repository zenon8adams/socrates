const yauzl = require("yauzl");
const path = require("path");
const fs = require("fs");
const util = require("util");
const Transform = require("stream").Transform;
const fsp = require('node:fs/promises');

const zipFilePath = process.argv[2];

(async () => {
  await unzipFile(zipFilePath);
  console.log('Done!');
})();

function unzipFile(archivePath) {
  let handleCount = 0;
  return new Promise((resolve, reject) => {
    yauzl.open(archivePath, {lazyEntries : true}, async (err, zipfile) => {
      // track when we've closed all our file handles
      function incrementHandleCount() { handleCount++; }
      function decrementHandleCount() {
        handleCount--;
        if (handleCount === 0) {
          resolve();
        }
      }

      incrementHandleCount();
      zipfile.on("close", function() { decrementHandleCount(); });

      zipfile.readEntry();
      zipfile.on("entry", async (entry) => {
        if (/\/$/.test(entry.fileName)) {
          // directory file names end with '/'
          await fsp.mkdir(entry.fileName, {recursive : true});
          zipfile.readEntry();
        } else {
          // ensure parent directory exists
          if (!fs.existsSync(path.dirname(entry.fileName))) {
            await fsp.mkdir(path.dirname(entry.fileName));
          }
          zipfile.openReadStream(entry, function(err, readStream) {
            if (err) {
              reject(err);
              return;
            }

            const filter = new Transform();
            filter._transform = function(chunk, encoding,
                                         cb) { cb(null, chunk); };
            filter._flush = function(cb) {
              cb();
              zipfile.readEntry();
            };

            // pump file contents
            const writeStream = fs.createWriteStream(entry.fileName);
            incrementHandleCount();
            writeStream.on("close", decrementHandleCount);
            readStream.pipe(filter).pipe(writeStream);
          });
        }
      });
    });
  });
}
