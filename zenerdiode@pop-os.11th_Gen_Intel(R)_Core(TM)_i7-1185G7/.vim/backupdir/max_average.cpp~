#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>

bool check(const std::vector<int>& nums, size_t k, double m);

double findMaxAverage( const std::vector<int>& nums, size_t k) {
    constexpr double kErr = 1e-5;
    double l = *min_element(begin(nums), end(nums));
    double r = *max_element(begin(nums), end(nums));

    while (r - l > kErr) {
      const double m = (l + r) / 2;
      if (check(nums, k, m))
        l = m;
      else
        r = m;
    }

    return l;
}

// Returns true if there's a subarray with length >= k and average sum >= m.
bool check(const std::vector<int>& nums, size_t k, double m) {
    double sum = 0;
    double prevSum = 0;
    double minPrevSum = 0;

    for ( size_t i = 0; i < nums.size(); ++i) {
      // Trick: -m for each num so that we can check if the sum of the
      // Subarray >= 0
      sum += nums[i] - m;
      if (i >= k) {
        prevSum += nums[i - k] - m;
        minPrevSum = std::min(minPrevSum, prevSum);
      }
      // If sum - minPrevSum >= 0,
      // We know there's a subarray with length >= k and average sum >= m
      if (i + 1 >= k && sum >= minPrevSum)
        return true;
    }

    return false;
}

int main()
{
    auto result = findMaxAverage({ 1, 2, 1, 5, -1, 2, 1}, 2);
    std::cout << "Max average: " << result <<'\n';
}
