/*
// To use any npm package, just import it
import axios from "axios";
import Stripe from "stripe";

const stripe = Stripe("sk_test_4eC39HqLyjWDarjtT1zdp7dc");

async function createCustomer(detail) {
  try {
    const { email: email, full_name: name, phone_number: phone } = detail;

    const customer = await stripe.customers.create({
      email: email,
      name: name,
      phone: phone,
      metadata: detail,
    });

    return Object.assign(customer, { ...customer, is_new: true });
  } catch (error) {
    console.error("Error creating customer:", error.message);
  }
}

async function createPaymentIntent(amount, customerID, metadata) {
  try {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount,
      currency: "usd",
      customer: customerID,
      capture_method: "manual",
      automatic_payment_methods: {
        enabled: true,
      },
      setup_future_usage: "off_session",
      metadata: metadata,
    });
    return paymentIntent.client_secret;
  } catch (error) {
    console.error("Error creating payment intent:", error.message);
  }
}

async function chargeCustomer(customerID, amount, metadata) {
  try {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount,
      currency: "usd",
      customer: customerID,
      metadata: metadata,
    });
    return paymentIntent.client_secret;
  } catch (error) {
    console.error("Error charging customer:", error.message);
  }
}

async function findCustomer(detail) {
  const search_result = await stripe.customers.search({
    query: `email:"${detail.email}"`,
  });
  const matches = search_result.data;
  return matches.length !== 0 ? matches[0] : await createCustomer(detail);
}

function retrieveProduct(detail) {
  const { points: point, type, plan } = detail;
  const offset = points_slider.indexOf(`${point}`);
  const price_map = pricing[offset];
  const credit_key = Object.keys(price_map).find(
    (key) => key.indexOf(type.toLowerCase()) !== -1,
  );
  const credit = price_map[credit_key];
  const price = treat_as_currency(price_map[plan]);
  return { price: price, credit: credit };
}

function treat_as_currency(raw_value) {
  return raw_value.replace(",", "").match(/\d+/)[0];
}

function stringify_values(obj) {
  const result = {};
  for (const key in obj) {
    const value = obj[key];
    result[key] = value.toString();
  }

  return result;
}

async function send_secret(url, secret) {
  try {
    await axios.post(url, { secret: secret });
  } catch (error) {
    console.error("Unable to send secret message");
  }
}

async function defineComponent() {
  const detail = {
    full_name: "John Doe",
    email: "john.doe@example.com",
    phone_number: "+1234567890",
    company_name: "ABC Corp",
    company_website: "http://www.abccorp.com",
    billing_address: "123 Main Street",
    state: "California",
    zip_code: "12345",
    country: "United States",
    plan: "PowerPixel",
    type: "B2B",
    points: 2000,
  };

  const customer = await findCustomer(detail);
  const product_detail = retrieveProduct(detail);
  const is_new_customer = customer.is_new;

  const metadata = stringify_values(
    Object.assign(detail, { ...detail, product_detail }),
  );

  const secret = await (is_new_customer
    ? chargeCustomer(customer.id, product_detail.price, metadata)
    : createPaymentIntent(product_detail.price, customer.id, metadata));

  console.log(secret);

  //    await send_secret(base_url, secret);
}

const pricing = [
  {
    b2c_credit: "300",
    b2b_credit: "200",
    PowerPixel: "$90.00",
    PowerPixel_plus: "$120.00",
    PowerPixel_plusGrowth: "$870.00",
  },
  {
    b2c_credit: "450",
    b2b_credit: "300",
    PowerPixel: "$120.00",
    PowerPixel_plus: "$170.00",
    PowerPixel_plusGrowth: "$920.00",
  },
  {
    b2c_credit: "900",
    b2b_credit: "600",
    PowerPixel: "$230.00",
    PowerPixel_plus: "$320.00",
    PowerPixel_plusGrowth: "$1,070.00",
  },
  {
    b2c_credit: "1350",
    b2b_credit: "900",
    PowerPixel: "$340.00",
    PowerPixel_plus: "$470.00",
    PowerPixel_plusGrowth: "$1,220.00 ",
  },
  {
    b2c_credit: "1800",
    b2b_credit: "1200",
    PowerPixel: "$450.00",
    PowerPixel_plus: "$630.00",
    PowerPixel_plusGrowth: "$1,380.00",
  },
  {
    b2c_credit: "2250",
    b2b_credit: "1500",
    PowerPixel: "$550.00",
    PowerPixel_plus: "$780.00",
    PowerPixel_plusGrowth: "$1,530.00",
  },
  {
    b2c_credit: "2700",
    b2b_credit: "1800",
    PowerPixel: "$660.00",
    PowerPixel_plus: "$930.00",
    PowerPixel_plusGrowth: "$1,680.00",
  },
  {
    b2c_credit: "3150",
    b2b_credit: "2100",
    PowerPixel: "$770.00",
    PowerPixel_plus: "$1,090.00",
    PowerPixel_plusGrowth: "$1,840.00",
  },
  {
    b2c_credit: "3600",
    b2b_credit: "2450",
    PowerPixel: "$880.00",
    PowerPixel_plus: "$1,240.00",
    PowerPixel_plusGrowth: "$1,990.00",
  },
  {
    b2c_credit: "4050",
    b2b_credit: "2700",
    PowerPixel: "$990.00",
    PowerPixel_plus: "$1,390.00",
    PowerPixel_plusGrowth: "$2,140.00",
  },
  {
    b2c_credit: "4500",
    b2b_credit: "3000",
    PowerPixel: "$1,090.00",
    PowerPixel_plus: "$1,540.00",
    PowerPixel_plusGrowth: "$2,290.00",
  },
  {
    b2c_credit: "6750",
    b2b_credit: "4500",
    PowerPixel: "$1,630.00",
    PowerPixel_plus: "$2,310.00",
    PowerPixel_plusGrowth: "$3,060.00",
  },
  {
    b2c_credit: "9000",
    b2b_credit: "6000",
    PowerPixel: "$2,210.00",
    PowerPixel_plus: "$3,070.00",
    PowerPixel_plusGrowth: "$3,820.00",
  },
  {
    b2c_credit: "11250",
    b2b_credit: "7500",
    PowerPixel: "$2,470.00",
    PowerPixel_plus: "$3,840.00",
    PowerPixel_plusGrowth: "$4,590.00",
  },
  {
    b2c_credit: "13500",
    b2b_credit: "9045",
    PowerPixel: "$3,050.00",
    PowerPixel_plus: "$4,400.00",
    PowerPixel_plusGrowth: "$5,150.00",
  },
  {
    b2c_credit: "15750",
    b2b_credit: "10550",
    PowerPixel: "$3,300.00",
    PowerPixel_plus: "$4,870.00",
    PowerPixel_plusGrowth: "$5,620.00",
  },
  {
    b2c_credit: "18000",
    b2b_credit: "12000",
    PowerPixel: "$3,470.00",
    PowerPixel_plus: "$5,270.00",
    PowerPixel_plusGrowth: "$6,020.00",
  },
  {
    b2c_credit: "20250",
    b2b_credit: "13550",
    PowerPixel: "$3,580.00",
    PowerPixel_plus: "$5,600.00",
    PowerPixel_plusGrowth: "$6,350.00",
  },
  {
    b2c_credit: "22500",
    b2b_credit: "15000",
    PowerPixel: "$3,610.00",
    PowerPixel_plus: "$5,860.00",
    PowerPixel_plusGrowth: "$6,610.00",
  },
];

const points_slider = [
  "500",
  "1000",
  "2000",
  "3000",
  "4000",
  "5000",
  "6000",
  "7000",
  "8000",
  "9000",
  "10000",
  "15000",
  "20000",
  "25000",
  "30000",
  "35000",
  "40000",
  "45000",
  "50000",
];

console.log(await defineComponent());
*/

import Stripe from "stripe";

const stripe = Stripe("sk_test_4eC39HqLyjWDarjtT1zdp7dc");

const customer = await stripe.customers.create();

async function createPaymentIntent(amount, customerID) {
  try {
    const paymentMethod = await stripe.paymentMethods.create({
      type: "card",
      card: {
        number: "4242424242424242",
        exp_month: 8,
        exp_year: 2026,
        cvc: "314",
      },
    });
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount,
      currency: "usd",
      customer: customerID,
      capture_method: 'automatic',
      automatic_payment_methods: {
        enabled: true,
      },
      payment_method: paymentMethod.id,
      setup_future_usage: "off_session",
    });
    return paymentIntent;
  } catch (error) {
    console.error("Error creating payment intent:", error.message);
    throw error;
  }
}

/*async function chargeCustomer(customerID, amount) {
  try {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount,
      currency: "usd",
      customer: customerID,
    });
    return paymentIntent.client_secret;
  } catch (error) {
    console.error("Error charging customer:", error.message);
    throw error;
  }
} */

async function chargeCustomer(paymentIntentSecret, customerID) {
  try {
    const initialIntent =
      await stripe.paymentIntents.retrieve(paymentIntentSecret);
    const paymentMethod = initialIntent.payment_method;
    const paymentIntent = await stripe.paymentIntents.confirm(
      paymentIntentSecret,
      {
        return_url: "https://eozdzbeehx4m1ou.m.pipedream.net/",
        payment_method: paymentMethod.id,
      },
    );

    if (paymentIntent.status === "succeeded") {
      console.log("Payment succeeded!");
      // You can perform additional actions here if needed
    } else {
      console.log("Payment failed:", paymentIntent.status);
      // Handle failed payment
    }
  } catch (error) {
    console.error("Error charging customer:", error.message);
    throw error;
  }
}

const initialIntent = await createPaymentIntent(2000, customer.id);
//const otherIntent = await chargeCustomer(customer.id, 100);
//console.log(initialIntent);
chargeCustomer(initialIntent.id, customer.id);
