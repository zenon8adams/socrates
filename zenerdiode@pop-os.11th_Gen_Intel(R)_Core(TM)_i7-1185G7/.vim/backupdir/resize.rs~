extern crate resize;
extern crate rgb;
extern crate y4m;

use std::env;
use std::fs::File;
use std::io;

fn main() {
    let args: Vec<_> = env::args().collect();
    if args.len() != 3 {
        return println!("Usage: {} in.y4m out.y4m", args[0]);
    }

    let mut infh: Box<dyn io::Read> = if args[1] == "-" {
        Box::new(io::stdin())
    } else {
        Box::new(File::open(&args[1]).unwrap())
    };
    let mut decoder = y4m::decode(&mut infh).unwrap();

    if decoder.get_bit_depth() != 8 {
        panic!(
            "Unsupported bit depth {}, this example only supports 8.",
            decoder.get_bit_depth()
        );
    }

    let mut outfh: Box<dyn io::Write> = if args[2] == "-" {
        Box::new(io::stdout())
    } else {
        Box::new(File::create(&args[2]).unwrap())
    };
    let mut encoder = y4m::encode(
        decoder.get_width(),
        decoder.get_height(),
        decoder.get_framerate(),
    )
    .with_colorspace(y4m::Colorspace::C420)
    .write_header(&mut outfh)
    .unwrap();

    loop {
        match decoder.read_frame() {
            Ok(frame) => {
                let out_frame = y4m::Frame::new([&[0; 10], &[], &[]], None);
                if encoder.write_frame(&out_frame).is_err() {
                    break;
                }
            }
            _ => break,
        }
    }
}
